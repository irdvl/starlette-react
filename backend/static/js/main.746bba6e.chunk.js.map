{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Review","_ref","review","react_default","a","createElement","className","text","yelp_rating","model_rating","Business","_ref2","data","name","review_rating","reviews","map","i","App_Review","key","App","state","loading","handleChange","event","_this","setState","target","value","handleSubmit","preventDefault","url","encodeURIComponent","hostname","window","location","origin","axios","get","concat","then","response","catch","error","console","log","message","this","onSubmit","type","onChange","App_Business","React","Component","Boolean","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8PAGMA,EAAS,SAAAC,GAAc,IAAZC,EAAYD,EAAZC,OACf,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeJ,EAAOK,MACnCJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,gBAAyCJ,EAAOM,aAChDL,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,iBAA2CJ,EAAOO,iBAMpDC,EAAW,SAAAC,GAAY,IAAVC,EAAUD,EAAVC,KACjB,OAAKA,EAEHT,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,4BAAoBO,EAAKC,MACzBV,EAAAC,EAAAC,cAAA,2CAAmCO,EAAKJ,aACxCL,EAAAC,EAAAC,cAAA,8EAAsEO,EAAKE,eAC3EX,EAAAC,EAAAC,cAAA,8FAAsFO,EAAKH,eAE7FN,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACZM,EAAKG,QAAQC,IAAI,SAACd,EAAQe,GAAT,OAAed,EAAAC,EAAAC,cAACa,EAAD,CAAQC,IAAKF,EAAGf,OAAQA,QAX7C,MAiBCkB,6MACnBC,MAAQ,CACNT,KAAM,KACNC,KAAM,GACNS,SAAS,EACTP,QAAS,MAGXQ,aAAe,SAAAC,GACbC,EAAKC,SAAS,CAACb,KAAMW,EAAMG,OAAOC,WAGpCC,aAAe,SAAAL,GAGb,GAFAA,EAAMM,kBAEFL,EAAKJ,MAAMC,QAAf,CAEAG,EAAKC,SAAS,CAACJ,SAAS,IAExB,IAAMS,EAAMC,mBAAmBP,EAAKJ,MAAMR,MACpCoB,EAAWC,OAAOC,SAASC,OAEjCC,IAAMC,IAAN,GAAAC,OAAaN,EAAb,kBAAAM,OAAsCR,IACnCS,KAAK,SAAAC,GAAQ,OAAIhB,EAAKC,SAAS,CAACd,KAAM6B,EAAS7B,KAAMU,SAAS,MAC9DoB,MAAM,SAACC,GACNlB,EAAKC,SAAS,CAACJ,SAAS,IACxBsB,QAAQC,IAAI,gBAAkBF,EAAMG,qFAKxC,IAAMlC,EAAOmC,KAAK1B,MAAMT,KAExB,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,QAAM2C,SAAUD,KAAKlB,cACnB1B,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,SAAO4C,KAAK,OAAOpC,KAAK,OAAOqC,SAAUH,KAAKxB,aAAcK,MAAOmB,KAAK1B,MAAMR,QAEhFV,EAAAC,EAAAC,cAAA,UAAQ4C,KAAK,UAAUF,KAAK1B,MAAMC,QAAU,aAAe,WAE7DnB,EAAAC,EAAAC,cAAC8C,EAAD,CAAUvC,KAAMA,YA1CSwC,IAAMC,WCvBnBC,QACW,cAA7BpB,OAAOC,SAASF,UAEe,UAA7BC,OAAOC,SAASF,UAEhBC,OAAOC,SAASF,SAASsB,MACvB,2DCVNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.746bba6e.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nconst Review = ({review}) => {\n  return (\n    <div className=\"review\">\n      <p className=\"review-text\">{review.text}</p>\n      <div className=\"review-ratings\">\n        <p className=\"yelp-rating\">Yelp Rating: {review.yelp_rating}</p>\n        <p className=\"model-rating\">Model Rating: {review.model_rating}</p>\n      </div>\n    </div>\n  );\n};\n\nconst Business = ({data}) => {\n  if (!data) return null;\n  return (\n    <div>\n      <ul>\n        <li>Business Name: {data.name}</li>\n        <li>Yelp Rating (overall rating): {data.yelp_rating}</li>\n        <li>Review Rating (scores of 20 most relevant reviews averaged out): {data.review_rating}</li>\n        <li>Model Rating: (model predicted scores of 20 most relevant reviews averaged out): {data.model_rating}</li>\n      </ul>\n      <strong>Reviews</strong>\n      <div className=\"reviews\">\n        {data.reviews.map((review, i) => <Review key={i} review={review} />)}\n      </div>\n    </div>\n  );\n};\n\nexport default class App extends React.Component {\n  state = {\n    data: null,\n    name: '',\n    loading: false,\n    reviews: {}\n  };\n\n  handleChange = event => {\n    this.setState({name: event.target.value});\n  }\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    if (this.state.loading) return;\n\n    this.setState({loading: true});\n\n    const url = encodeURIComponent(this.state.name);\n    const hostname = window.location.origin;\n\n    axios.get(`${hostname}/business?url=${url}`)\n      .then(response => this.setState({data: response.data, loading: false}))\n      .catch((error) => {\n        this.setState({loading: false});\n        console.log('Fetch error: ' + error.message);\n      });\n  }\n\n  render() {\n    const data = this.state.data;\n    \n    return (\n      <div className=\"app\">\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            <strong>Enter Yelp URL:</strong>\n            <input type=\"text\" name=\"name\" onChange={this.handleChange} value={this.state.name} />\n          </label>\n          <button type=\"submit\">{this.state.loading ? 'Loading...' : 'Submit'}</button>\n        </form>\n        <Business data={data} />\n      </div>\n    );\n  }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}